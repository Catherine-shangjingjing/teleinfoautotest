# NOTE: Generated By HttpRunner v3.1.6
# FROM: testcases/template/templateCreate.yml


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase


class TestCaseTemplatecreate(HttpRunner):

    config = Config("数据模版创建").base_url("${ENV(HOST)}").verify(False)

    teststeps = [
        Step(
            RunRequest("数据模板创建")
            .post("/api/v5/identity/template")
            .with_headers(
                **{
                    "Accept": "application/json, text/plain, */*",
                    "Accept-Encoding": "gzip, deflate",
                    "Accept-Language": "zh-CN,zh;q=0.9",
                    "Connection": "keep-alive",
                    "Content-Length": "567",
                    "Content-Type": "application/json",
                    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36",
                }
            )
            .with_cookies(**{"SESSION": "$entSession"})
            .with_json(
                {
                    "description": "test",
                    "handle": "",
                    "id": "",
                    "industryCategory": "C",
                    "industrySpecific": "15",
                    "industrySubclass": "1530",
                    "industryTrade": "153",
                    "items": [
                        {
                            "authorizationKey": "",
                            "idIndex": 2000,
                            "idType": "terminalType",
                            "metadata": {
                                "maxLength": 65536,
                                "minLength": 0,
                                "type": "string",
                            },
                            "metadataId": None,
                            "name": "终端类型",
                            "required": False,
                            "state": 1,
                        },
                        {
                            "authorizationKey": "",
                            "idIndex": 2001,
                            "idType": "subject",
                            "metadata": {
                                "maxLength": 65536,
                                "minLength": 0,
                                "type": "string",
                            },
                            "metadataId": None,
                            "name": "所属主体",
                            "required": False,
                            "state": 1,
                        },
                        {
                            "authorizationKey": "",
                            "idIndex": 2002,
                            "idType": "useFor",
                            "metadata": {
                                "maxLength": 65536,
                                "minLength": 0,
                                "type": "string",
                            },
                            "metadataId": None,
                            "name": "用途",
                            "required": False,
                            "state": 1,
                        },
                        {
                            "authorizationKey": "",
                            "idIndex": 2003,
                            "idType": "serOrImei",
                            "metadata": {
                                "maxLength": 65536,
                                "minLength": 0,
                                "type": "string",
                            },
                            "metadataId": None,
                            "name": "串号或IMEI",
                            "required": False,
                            "state": 1,
                        },
                        {
                            "authorizationKey": "",
                            "idIndex": 2004,
                            "idType": "licenseNo",
                            "metadata": {
                                "maxLength": 65536,
                                "minLength": 0,
                                "type": "string",
                            },
                            "metadataId": None,
                            "name": "进网许可证编号",
                            "required": False,
                            "state": 1,
                        },
                        {
                            "authorizationKey": "",
                            "idIndex": 2005,
                            "idType": "licenseSign",
                            "metadata": {
                                "maxLength": 65536,
                                "minLength": 0,
                                "type": "string",
                            },
                            "metadataId": None,
                            "name": "进网许可标志序号",
                            "required": False,
                            "state": 1,
                        },
                        {
                            "authorizationKey": "",
                            "editable": True,
                            "idIndex": 2006,
                            "idType": "autotest",
                            "metadata": {
                                "maxLength": 10000,
                                "minLength": 0,
                                "type": "string",
                            },
                            "metadataId": None,
                            "name": "数据模板测试",
                            "required": False,
                            "state": 1,
                            "whichClicked": [],
                        },
                    ],
                    "prefix": "${prefix}",
                    "type": 1,
                    "version": "${version}",
                }
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.message", "success")
            .assert_equal("body.data", True)
        ),
    ]


if __name__ == "__main__":
    TestCaseTemplatecreate().test_start()
